<!DOCTYPE html>
<html>
<head>
    <title>Array Type Example 6</title>
    <script type="text/javascript">

        let ints,
            reset = () => ints = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
        reset();
        // 从 ints 中复制索引 0 开始的内容，插入到索引 5 开始的位置
        // 在源索引或目标索引到达数组边界时停止
        ints.copyWithin(5);
        console.log(ints); // [0, 1, 2, 3, 4, 0, 1, 2, 3, 4]

        reset();
        // 从 ints 中复制索引 5 开始的内容，插入到索引 0 开始的位置
        ints.copyWithin(0, 5);
        console.log(ints); // [5, 6, 7, 8, 9, 5, 6, 7, 8, 9]

        reset();
        // 从 ints 中复制索引 0 开始到索引 3 结束的内容
        // 插入到索引 4 开始的位置
        ints.copyWithin(4, 0, 3);
        alert(ints); // [0, 1, 2, 3, 0, 1, 2, 7, 8, 9]


        reset();
        // JavaScript 引擎在插值前会完整复制范围内的值
        // 因此复制期间不存在重写的风险
        ints.copyWithin(2, 0, 6);
        alert(ints); // [0, 1, 0, 1, 2, 3, 4, 5, 8, 9]

        reset();
        // 支持负索引值，与 fill()相对于数组末尾计算正向索引的过程是一样的
        ints.copyWithin(-4, -7, -3);
        alert(ints); // [0, 1, 2, 3, 4, 5, 3, 4, 5, 6]

        // copyWithin()静默忽略超出数组边界、零长度及方向相反的索引范围：
        let ints,
            reset1 = () => ints1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
        reset1();
        // 索引过低，忽略
        ints1.copyWithin(1, -15, -12);
        alert(ints1); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
        reset1()
        // 索引过高，忽略
        ints1.copyWithin(1, 12, 15);
        alert(ints1); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
        reset1();
        // 索引反向，忽略
        ints1.copyWithin(2, 4, 2);
        alert(ints1); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
        reset1();
        // 索引部分可用，复制、填充可用部分
        ints1.copyWithin(4, 7, 10)
        alert(ints1); // [0, 1, 2, 3, 7, 8, 9, 7, 8, 9];
    </script>
</head>
<body>

</body>
</html>