<!DOCTYPE html>
<html>
<head>
    <title>Function Type Example</title>
    <script type="text/javascript">

        // 箭头函数同样也可以这样使用默认参数，只不过在只有一个参数时，就必须使用括号而不能省略了
        let makeKing = (name = 'Henry') => `King ${name}`;
        console.log(makeKing()); // King Henry


        function makeKing1(name = 'Henry', numerals = 'VIII') {
            return `King ${name} ${numerals}`;
        }

        console.log(makeKing1()); // King Henry VIII

        // 因为参数是按顺序初始化的，所以后定义默认值的参数可以引用先定义的参数
        function makeKing2(name = 'Henry', numerals = name) {
            return `King ${name} ${numerals}`;
        }
        console.log(makeKing2()); // King Henry Henry

        // 参数初始化顺序遵循“暂时性死区”规则，即前面定义的参数不能引用后面定义的
        // 调用时不传第一个参数会报错
        function makeKing3(name = numerals, numerals = 'VIII') {
            return `King ${name} ${numerals}`;
        }
        console.log(makeKing3()); // error

        // 参数也存在于自己的作用域中，它们不能引用函数体的作用域
        // 调用时不传第二个参数会报错
        function makeKing4(name = 'Henry', numerals = defaultNumeral) {
            let defaultNumeral = 'VIII';
            return `King ${name} ${numerals}`;
        }
        
    </script>
</head>
<body>

</body>
</html>